type Collection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  createdAt: Datetime
  name: String!

  """Reads and enables pagination through a set of `PhotoCollection`."""
  photoCollections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PhotoCollection`."""
    orderBy: [PhotoCollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PhotoCollectionCondition
  ): PhotoCollectionsConnection!
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Collection`"""
input CollectionInput {
  rowId: Int
  createdAt: Datetime
  name: String!
}

"""
Represents an update to a `Collection`. Fields that are set will be updated.
"""
input CollectionPatch {
  rowId: Int
  createdAt: Datetime
  name: String
}

"""A connection to a list of `Collection` values."""
type CollectionsConnection {
  """A list of `Collection` objects."""
  nodes: [Collection]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Collection` at the end of the edge."""
  node: Collection
}

"""Methods to use when ordering `Collection`."""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Collection` mutation."""
input CreateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Collection` to be created by this mutation."""
  collection: CollectionInput!
}

"""The output of our create `Collection` mutation."""
type CreateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was created by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = PRIMARY_KEY_ASC
  ): CollectionsEdge
}

"""All input for the create `PhotoCollection` mutation."""
input CreatePhotoCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PhotoCollection` to be created by this mutation."""
  photoCollection: PhotoCollectionInput!
}

"""The output of our create `PhotoCollection` mutation."""
type CreatePhotoCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PhotoCollection` that was created by this mutation."""
  photoCollection: PhotoCollection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Photo` that is related to this `PhotoCollection`."""
  photo: Photo

  """Reads a single `Collection` that is related to this `PhotoCollection`."""
  collection: Collection

  """An edge for our `PhotoCollection`. May be used by Relay 1."""
  photoCollectionEdge(
    """The method to use when ordering `PhotoCollection`."""
    orderBy: [PhotoCollectionsOrderBy!] = PRIMARY_KEY_ASC
  ): PhotoCollectionsEdge
}

"""All input for the create `Photo` mutation."""
input CreatePhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Photo` to be created by this mutation."""
  photo: PhotoInput!
}

"""The output of our create `Photo` mutation."""
type CreatePhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Photo` that was created by this mutation."""
  photo: Photo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Photo`. May be used by Relay 1."""
  photoEdge(
    """The method to use when ordering `Photo`."""
    orderBy: [PhotosOrderBy!] = PRIMARY_KEY_ASC
  ): PhotosEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCollectionById` mutation."""
input DeleteCollectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCollection` mutation."""
input DeleteCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Collection` mutation."""
type DeleteCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was deleted by this mutation."""
  collection: Collection
  deletedCollectionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = PRIMARY_KEY_ASC
  ): CollectionsEdge
}

"""All input for the `deletePhotoById` mutation."""
input DeletePhotoByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Photo` to be deleted.
  """
  id: ID!
}

"""All input for the `deletePhotoCollectionById` mutation."""
input DeletePhotoCollectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PhotoCollection` to be deleted.
  """
  id: ID!
}

"""All input for the `deletePhotoCollection` mutation."""
input DeletePhotoCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `PhotoCollection` mutation."""
type DeletePhotoCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PhotoCollection` that was deleted by this mutation."""
  photoCollection: PhotoCollection
  deletedPhotoCollectionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Photo` that is related to this `PhotoCollection`."""
  photo: Photo

  """Reads a single `Collection` that is related to this `PhotoCollection`."""
  collection: Collection

  """An edge for our `PhotoCollection`. May be used by Relay 1."""
  photoCollectionEdge(
    """The method to use when ordering `PhotoCollection`."""
    orderBy: [PhotoCollectionsOrderBy!] = PRIMARY_KEY_ASC
  ): PhotoCollectionsEdge
}

"""All input for the `deletePhoto` mutation."""
input DeletePhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Photo` mutation."""
type DeletePhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Photo` that was deleted by this mutation."""
  photo: Photo
  deletedPhotoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Photo`. May be used by Relay 1."""
  photoEdge(
    """The method to use when ordering `Photo`."""
    orderBy: [PhotosOrderBy!] = PRIMARY_KEY_ASC
  ): PhotosEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Collection`."""
  createCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionInput!
  ): CreateCollectionPayload

  """Creates a single `Photo`."""
  createPhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePhotoInput!
  ): CreatePhotoPayload

  """Creates a single `PhotoCollection`."""
  createPhotoCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePhotoCollectionInput!
  ): CreatePhotoCollectionPayload

  """
  Updates a single `Collection` using its globally unique id and a patch.
  """
  updateCollectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByIdInput!
  ): UpdateCollectionPayload

  """Updates a single `Collection` using a unique key and a patch."""
  updateCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload

  """Updates a single `Photo` using its globally unique id and a patch."""
  updatePhotoById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePhotoByIdInput!
  ): UpdatePhotoPayload

  """Updates a single `Photo` using a unique key and a patch."""
  updatePhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePhotoInput!
  ): UpdatePhotoPayload

  """
  Updates a single `PhotoCollection` using its globally unique id and a patch.
  """
  updatePhotoCollectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePhotoCollectionByIdInput!
  ): UpdatePhotoCollectionPayload

  """Updates a single `PhotoCollection` using a unique key and a patch."""
  updatePhotoCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePhotoCollectionInput!
  ): UpdatePhotoCollectionPayload

  """Deletes a single `Collection` using its globally unique id."""
  deleteCollectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByIdInput!
  ): DeleteCollectionPayload

  """Deletes a single `Collection` using a unique key."""
  deleteCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionInput!
  ): DeleteCollectionPayload

  """Deletes a single `Photo` using its globally unique id."""
  deletePhotoById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePhotoByIdInput!
  ): DeletePhotoPayload

  """Deletes a single `Photo` using a unique key."""
  deletePhoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePhotoInput!
  ): DeletePhotoPayload

  """Deletes a single `PhotoCollection` using its globally unique id."""
  deletePhotoCollectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePhotoCollectionByIdInput!
  ): DeletePhotoCollectionPayload

  """Deletes a single `PhotoCollection` using a unique key."""
  deletePhotoCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePhotoCollectionInput!
  ): DeletePhotoCollectionPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Photo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  createdAt: Datetime
  filepath: String
  identifyCommand: String!
  identifyVerbose: String!

  """Reads and enables pagination through a set of `PhotoCollection`."""
  photoCollections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PhotoCollection`."""
    orderBy: [PhotoCollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PhotoCollectionCondition
  ): PhotoCollectionsConnection!
}

type PhotoCollection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  createdAt: Datetime
  photoId: Int!
  collectionId: Int!

  """Reads a single `Photo` that is related to this `PhotoCollection`."""
  photo: Photo

  """Reads a single `Collection` that is related to this `PhotoCollection`."""
  collection: Collection
}

"""
A condition to be used against `PhotoCollection` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PhotoCollectionCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `photoId` field."""
  photoId: Int

  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int
}

"""An input for mutations affecting `PhotoCollection`"""
input PhotoCollectionInput {
  rowId: Int
  createdAt: Datetime
  photoId: Int!
  collectionId: Int!
}

"""
Represents an update to a `PhotoCollection`. Fields that are set will be updated.
"""
input PhotoCollectionPatch {
  rowId: Int
  createdAt: Datetime
  photoId: Int
  collectionId: Int
}

"""A connection to a list of `PhotoCollection` values."""
type PhotoCollectionsConnection {
  """A list of `PhotoCollection` objects."""
  nodes: [PhotoCollection]!

  """
  A list of edges which contains the `PhotoCollection` and cursor to aid in pagination.
  """
  edges: [PhotoCollectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PhotoCollection` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PhotoCollection` edge in the connection."""
type PhotoCollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PhotoCollection` at the end of the edge."""
  node: PhotoCollection
}

"""Methods to use when ordering `PhotoCollection`."""
enum PhotoCollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PHOTO_ID_ASC
  PHOTO_ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Photo` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PhotoCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `filepath` field."""
  filepath: String

  """Checks for equality with the object’s `identifyCommand` field."""
  identifyCommand: String

  """Checks for equality with the object’s `identifyVerbose` field."""
  identifyVerbose: String
}

"""An input for mutations affecting `Photo`"""
input PhotoInput {
  rowId: Int
  createdAt: Datetime
  filepath: String
  identifyCommand: String
  identifyVerbose: String
}

"""
Represents an update to a `Photo`. Fields that are set will be updated.
"""
input PhotoPatch {
  rowId: Int
  createdAt: Datetime
  filepath: String
  identifyCommand: String
  identifyVerbose: String
}

"""A connection to a list of `Photo` values."""
type PhotosConnection {
  """A list of `Photo` objects."""
  nodes: [Photo]!

  """
  A list of edges which contains the `Photo` and cursor to aid in pagination.
  """
  edges: [PhotosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Photo` you could get from the connection."""
  totalCount: Int!
}

"""A `Photo` edge in the connection."""
type PhotosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Photo` at the end of the edge."""
  node: Photo
}

"""Methods to use when ordering `Photo`."""
enum PhotosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FILEPATH_ASC
  FILEPATH_DESC
  IDENTIFY_COMMAND_ASC
  IDENTIFY_COMMAND_DESC
  IDENTIFY_VERBOSE_ASC
  IDENTIFY_VERBOSE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Collection`."""
  collections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition
  ): CollectionsConnection

  """Reads and enables pagination through a set of `Photo`."""
  photos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Photo`."""
    orderBy: [PhotosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PhotoCondition
  ): PhotosConnection

  """Reads and enables pagination through a set of `PhotoCollection`."""
  photoCollections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PhotoCollection`."""
    orderBy: [PhotoCollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PhotoCollectionCondition
  ): PhotoCollectionsConnection
  collection(rowId: Int!): Collection
  photo(rowId: Int!): Photo
  photoCollection(rowId: Int!): PhotoCollection

  """Reads a single `Collection` using its globally unique `ID`."""
  collectionById(
    """
    The globally unique `ID` to be used in selecting a single `Collection`.
    """
    id: ID!
  ): Collection

  """Reads a single `Photo` using its globally unique `ID`."""
  photoById(
    """The globally unique `ID` to be used in selecting a single `Photo`."""
    id: ID!
  ): Photo

  """Reads a single `PhotoCollection` using its globally unique `ID`."""
  photoCollectionById(
    """
    The globally unique `ID` to be used in selecting a single `PhotoCollection`.
    """
    id: ID!
  ): PhotoCollection
}

"""All input for the `updateCollectionById` mutation."""
input UpdateCollectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
}

"""All input for the `updateCollection` mutation."""
input UpdateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  rowId: Int!
}

"""The output of our update `Collection` mutation."""
type UpdateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was updated by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = PRIMARY_KEY_ASC
  ): CollectionsEdge
}

"""All input for the `updatePhotoById` mutation."""
input UpdatePhotoByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Photo` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Photo` being updated.
  """
  patch: PhotoPatch!
}

"""All input for the `updatePhotoCollectionById` mutation."""
input UpdatePhotoCollectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PhotoCollection` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `PhotoCollection` being updated.
  """
  patch: PhotoCollectionPatch!
}

"""All input for the `updatePhotoCollection` mutation."""
input UpdatePhotoCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PhotoCollection` being updated.
  """
  patch: PhotoCollectionPatch!
  rowId: Int!
}

"""The output of our update `PhotoCollection` mutation."""
type UpdatePhotoCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PhotoCollection` that was updated by this mutation."""
  photoCollection: PhotoCollection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Photo` that is related to this `PhotoCollection`."""
  photo: Photo

  """Reads a single `Collection` that is related to this `PhotoCollection`."""
  collection: Collection

  """An edge for our `PhotoCollection`. May be used by Relay 1."""
  photoCollectionEdge(
    """The method to use when ordering `PhotoCollection`."""
    orderBy: [PhotoCollectionsOrderBy!] = PRIMARY_KEY_ASC
  ): PhotoCollectionsEdge
}

"""All input for the `updatePhoto` mutation."""
input UpdatePhotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Photo` being updated.
  """
  patch: PhotoPatch!
  rowId: Int!
}

"""The output of our update `Photo` mutation."""
type UpdatePhotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Photo` that was updated by this mutation."""
  photo: Photo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Photo`. May be used by Relay 1."""
  photoEdge(
    """The method to use when ordering `Photo`."""
    orderBy: [PhotosOrderBy!] = PRIMARY_KEY_ASC
  ): PhotosEdge
}
